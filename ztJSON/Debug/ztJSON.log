生成启动时间为 2017/5/20 22:02:19。
     1>项目“F:\C Projects\ztJSON\ztJSON\ztJSON.vcxproj”在节点 2 上(Build 个目标)。
     1>ClCompile:
         E:\Visual Studio\VC\bin\CL.exe /c /ZI /nologo /W3 /WX- /sdl /Od /Oy- /D WIN32 /D _DEBUG /D _CONSOLE /D _UNICODE /D UNICODE /Gm /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /Fo"Debug\\" /Fd"Debug\vc140.pdb" /Gd /TP /analyze- /errorReport:prompt Json.cpp Parse.cpp Test.cpp
         Test.cpp
     1>f:\c projects\ztjson\ztjson\test.cpp(31): error C3867: “ztJSON::json::string_value”: 非标准语法；请使用 "&" 来创建指向成员的指针
         Parse.cpp
     1>e:\visual studio\vc\include\xutility(2835): error C2893: 未能使函数模板“unknown-type std::equal_to<void>::operator ()(_Ty1 &&,_Ty2 &&) const”专用化
         e:\visual studio\vc\include\xutility(2835): note: 用下列模板参数:
         e:\visual studio\vc\include\xutility(2835): note: “_Ty1=const ztJSON::json &”
         e:\visual studio\vc\include\xutility(2835): note: “_Ty2=const ztJSON::json &”
         e:\visual studio\vc\include\xutility(2877): note: 参见对正在编译的函数 模板 实例化“bool std::_Equal<_InIt1,_InIt2,_Pr>(_InIt1,_InIt1,_InIt2,_Pr)”的引用
                 with
                 [
                     _InIt1=const ztJSON::json *,
                     _InIt2=std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ztJSON::json>>>,
                     _Pr=std::equal_to<void>
                 ]
         e:\visual studio\vc\include\xutility(2900): note: 参见对正在编译的函数 模板 实例化“bool std::_Equal2<const ztJSON::json*,_InIt2,_Pr>(_InIt1,_InIt1,_InIt2,_Pr,std::true_type)”的引用
                 with
                 [
                     _InIt2=std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ztJSON::json>>>,
                     _Pr=std::equal_to<void>,
                     _InIt1=const ztJSON::json *
                 ]
         e:\visual studio\vc\include\xutility(2924): note: 参见对正在编译的函数 模板 实例化“bool std::equal<_InIt1,_InIt2,std::equal_to<void>>(_InIt1,_InIt1,_InIt2,_Pr)”的引用
                 with
                 [
                     _InIt1=std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ztJSON::json>>>,
                     _InIt2=std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ztJSON::json>>>,
                     _Pr=std::equal_to<void>
                 ]
         e:\visual studio\vc\include\vector(1833): note: 参见对正在编译的函数 模板 实例化“bool std::equal<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ztJSON::json>>>,std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ztJSON::json>>>>(_InIt1,_InIt1,_InIt2)”的引用
                 with
                 [
                     _InIt1=std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ztJSON::json>>>,
                     _InIt2=std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ztJSON::json>>>
                 ]
         f:\c projects\ztjson\ztjson\json.h(271): note: 参见对正在编译的函数 模板 实例化“bool std::operator ==<ztJSON::json,std::allocator<_Ty>>(const std::vector<_Ty,std::allocator<_Ty>> &,const std::vector<_Ty,std::allocator<_Ty>> &)”的引用
                 with
                 [
                     _Ty=ztJSON::json
                 ]
         Json.cpp
     1>f:\c projects\ztjson\ztjson\json.cpp(157): warning C4244: “参数”: 从“double”转换到“char”，可能丢失数据
     1>f:\c projects\ztjson\ztjson\json.cpp(156): warning C4474: snprintf: 格式字符串中传递的参数太多
         f:\c projects\ztjson\ztjson\json.cpp(156): note: placeholders and their parameters expect 0 variadic arguments, but 1 were provided
     1>f:\c projects\ztjson\ztjson\json.cpp(161): warning C4804: “+=”: 在操作中使用类型“bool”不安全
     1>f:\c projects\ztjson\ztjson\json.cpp(161): warning C4800: “const char *”: 将值强制为布尔值“true”或“false”(性能警告)
     1>f:\c projects\ztjson\ztjson\json.cpp(162): warning C4804: “+=”: 在操作中使用类型“bool”不安全
     1>f:\c projects\ztjson\ztjson\json.cpp(162): warning C4800: “const char *”: 将值强制为布尔值“true”或“false”(性能警告)
     1>f:\c projects\ztjson\ztjson\json.cpp(166): warning C4018: “<”: 有符号/无符号不匹配
     1>f:\c projects\ztjson\ztjson\json.cpp(184): warning C4474: snprintf: 格式字符串中传递的参数太多
         f:\c projects\ztjson\ztjson\json.cpp(184): note: placeholders and their parameters expect 0 variadic arguments, but 1 were provided
     1>e:\visual studio\vc\include\memory(701): error C2664: “void std::_Ptr_base<_Ty>::_Reset0(_Ty *,std::_Ref_count_base *)”: 无法将参数 1 从“const ztJSON::json_value *”转换为“ztJSON::json_value *”
                 with
                 [
                     _Ty=ztJSON::json_value
                 ]
         e:\visual studio\vc\include\memory(701): note: 转换丢失限定符
         e:\visual studio\vc\include\memory(671): note: 参见对正在编译的函数 模板 实例化“void std::shared_ptr<ztJSON::json_value>::_Resetp0<_Ux>(_Ux *,std::_Ref_count_base *)”的引用
                 with
                 [
                     _Ux=const ztJSON::json_value
                 ]
         e:\visual studio\vc\include\memory(671): note: 参见对正在编译的函数 模板 实例化“void std::shared_ptr<ztJSON::json_value>::_Resetp0<_Ux>(_Ux *,std::_Ref_count_base *)”的引用
                 with
                 [
                     _Ux=const ztJSON::json_value
                 ]
         e:\visual studio\vc\include\memory(464): note: 参见对正在编译的函数 模板 实例化“void std::shared_ptr<ztJSON::json_value>::_Resetp<_Ux,_Dx>(_Ux *,_Dx)”的引用
                 with
                 [
                     _Ux=const ztJSON::json_value,
                     _Dx=ztJSON::deleter
                 ]
         e:\visual studio\vc\include\memory(464): note: 参见对正在编译的函数 模板 实例化“void std::shared_ptr<ztJSON::json_value>::_Resetp<_Ux,_Dx>(_Ux *,_Dx)”的引用
                 with
                 [
                     _Ux=const ztJSON::json_value,
                     _Dx=ztJSON::deleter
                 ]
         e:\visual studio\vc\include\memory(613): note: 参见对正在编译的函数 模板 实例化“std::shared_ptr<ztJSON::json_value>::shared_ptr<_Ux,_Dx>(_Ux *,_Dx)”的引用
                 with
                 [
                     _Ux=const ztJSON::json_value,
                     _Dx=ztJSON::deleter
                 ]
         e:\visual studio\vc\include\memory(613): note: 参见对正在编译的函数 模板 实例化“std::shared_ptr<ztJSON::json_value>::shared_ptr<_Ux,_Dx>(_Ux *,_Dx)”的引用
                 with
                 [
                     _Ux=const ztJSON::json_value,
                     _Dx=ztJSON::deleter
                 ]
         f:\c projects\ztjson\ztjson\json.cpp(136): note: 参见对正在编译的函数 模板 实例化“void std::shared_ptr<ztJSON::json_value>::reset<const ztJSON::json_value,ztJSON::deleter>(_Ux *,_Dx)”的引用
                 with
                 [
                     _Ux=const ztJSON::json_value,
                     _Dx=ztJSON::deleter
                 ]
         f:\c projects\ztjson\ztjson\json.cpp(136): note: 参见对正在编译的函数 模板 实例化“void std::shared_ptr<ztJSON::json_value>::reset<const ztJSON::json_value,ztJSON::deleter>(_Ux *,_Dx)”的引用
                 with
                 [
                     _Ux=const ztJSON::json_value,
                     _Dx=ztJSON::deleter
                 ]
         正在生成代码...
     1>已完成生成项目“F:\C Projects\ztJSON\ztJSON\ztJSON.vcxproj”(Build 个目标)的操作 - 失败。

生成失败。

已用时间 00:00:09.40
